#! /usr/bin/env ruby

require 'pg'
require 'io/console'

class ExpenseData
  def initialize
    @db = PG.connect dbname: 'expenses'
    setup_schema
  end

  def add(amount, memo)
    @db.exec_params "INSERT INTO expenses (amount, memo) VALUES ($1, $2)", [amount, memo]
  end

  def list
    results = @db.exec "SELECT * FROM expenses;"

    display_count results
    display results if results.ntuples > 0
  end

  def search(term)
    results = @db.exec_params 'SELECT * FROM expenses WHERE memo ILIKE $1', [term]

    display_count results
    display results if results.ntuples > 0
  end

  def delete(id)
    results = @db.exec_params 'SELECT * FROM expenses WHERE id = $1', [id]

    if results.ntuples > 0
      @db.exec_params 'DELETE FROM expenses WHERE id = $1', [id]
      puts "The following expense has been deleted:"
      display results
    else
      puts "There is no expense with the id '#{id}'."
    end
  end

  def delete_all_expenses
    @db.exec("DELETE FROM expenses")
    puts "All expenses have been deleted."
  end

  private

  def display(list)
    list.each do |tuple|
      columns = [ tuple["id"].rjust(3),
                  tuple["created_on"].rjust(10),
                  tuple["amount"].rjust(12),
                  tuple["memo"] ]

      puts columns.join ' | '
    end

    amounts = results.field_values 'amount'
    total = amounts.map(&:to_f).inject { |sum, n| sum + n }

    puts '-' * 50
    puts "Total#{total.to_s.rjust(26)}"
  end

  def display_count(results)
    puts "There are #{list.ntuples > 0 ? list.ntuples : 'no'} expenses."
  end

  def setup_schema
    result = @connection.exec <<~SQL
      SELECT COUNT(*) FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name = 'expenses';
    SQL

    if result[0]["count"] == "0"
      @connection.exec <<~SQL
        CREATE TABLE expenses (
          id serial PRIMARY KEY,
          amount numberic(6,2) NOT NULL,
          memo text NOT NULL,
          created_on date DEFAULT NOW() NOT NULL
        );
      SQL
    end
  end
end

class CLI
  def initialize
    @data = ExpenseData.new
  end

  def run(args)
    command = args.shift
    case command
    when 'add'
      amount, memo = args[0], args[1]
      abort "You must provide an amount and memo." unless amount && memo
      @data.add amount, memo
    when 'list'
      @data.list
    when 'search'
      term = args[0]
      abort 'You must provide a search term.' unless term
      @data.search term
    when 'delete'
      id = args[0].to_i
      abort 'You must provide an ID to delete.' unless id
      @data.delete id
    when 'clear'
      puts "This will remove all expenses. Are you sure? (y/n)"
      input = $stdin.getch
      @data.delete_all_expenses if input == 'y'
    else
      help
    end
  end

  def help
    puts <<~HELP
    An expense recording system

    Commands:

    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
    HELP
  end
end

CLI.new.run(ARGV)
